package com.huatuo.customer.base.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import sun.misc.BASE64Decoder;

import com.huatuo.customer.config.SpringContextUtils;
import com.huatuo.customer.domain.XtFile;
import com.huatuo.customer.domain.XtServiceFile;
import com.huatuo.customer.service.XtFileService;
import com.huatuo.customer.service.XtServiceFileService;

/**
 * 图片上传，支持多个图片上传
 * 
 * @author ydj
 * 
 */
public class ImageUploadUtil {
	
	private static XtFileService xtFileService;
	
	private static XtServiceFileService xtServiceFileService;// 文件上传关联服务
	static{
		xtFileService = (XtFileService)SpringContextUtils.getBean("xtFileServiceImpl");
		xtServiceFileService = (XtServiceFileService) SpringContextUtils.getBean("xtServiceFileServiceImpl");
	}

	private static Random random = new Random();

	private static FtpUtils ftp = new FtpUtils();

	/**
	 * 图片上传
	 * 
	 * @param files
	 *            图片集合(必须是base64转换后字符串)
	 * @param serviceId
	 *            业务id(用于业务与文件关联)
	 * @param xtfile
	 *            文件上传对象(必须参数：description 文件说明 、uploaderId 用户上传id;其他参数可不传 )
	 * @author
	 * 
	 */
	public static List<String> ImageUpload(List<String> files, Long serviceId, XtFile xtfile)
			throws Exception {
		List<String> urlList=new ArrayList<String>();
			if (null != files && files.size() > 0) {
				int j=0;
				for (int i = 0; i < files.size(); i++) {
					/**
					 * 解析base64码,并上传
					 * 
					 */
					String base64 = files.get(i);
					long value = Math.abs(random.nextLong());
					String typeAndExt = base64.substring(
							base64.indexOf(":") + 1, base64.indexOf(";"));// 文件类型加后缀
					String type = typeAndExt.substring(0,
							typeAndExt.indexOf("/"));// 文件类型
					String fileExt = typeAndExt.substring(
							typeAndExt.indexOf("/") + 1, typeAndExt.length());// 截取文件后缀
					InputStream newFile =base64ToFile(base64);
					String fileName = value+"."+fileExt;// 文件名称
					String directory = "/image"
							+ new SimpleDateFormat("yyyyMM").format(new Date());
					ftp.upLoadFromProduction(directory, fileName, newFile);// 上传

					/**
					 * 保存上传文件信息
					 */
					xtfile.setUploadTime(new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss").format(new Date()));
					String url=directory + "/" + value + "." + fileExt;
					xtfile.setFileUrl(url);
					xtfile.setFileName(fileName);
					xtfile.setFileExt(fileExt);
					xtfile.setId(null);
					if (type.contains("image")) {// 文件类型设置
						xtfile.setUploadType(1);
					} else if (type.contains("audio")) {
						xtfile.setUploadType(2);
					} else {
						xtfile.setUploadType(3);
					}
					Long fileId = xtFileService.insertFile(xtfile);
					if(fileId > 0){
						urlList.add(url);
					}
					/**
					 * 保存文件与业务关联信息
					 */
					XtServiceFile xtSerFile = new XtServiceFile();
					xtSerFile.setServiceType(2);
					xtSerFile.setTypeId(serviceId);
					xtSerFile.setParentId(Long.valueOf(0));
					xtSerFile.setFileId(fileId);
					xtSerFile.setFileName(fileName);
					xtSerFile.setCreateUid(xtfile.getUploaderId());
					xtSerFile.setCreateTime(new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss").format(new Date()));
					xtSerFile.setIsSystem(0);
					xtSerFile.setId(null);
					j = xtServiceFileService.insertXtServiceFile(xtSerFile);
				}
				if(urlList.size() > 0 && j > 0){
					return urlList;
				}
			}
		return null;
	}

	/**
	 * base64转换成流
	 * 
	 * @param base64
	 * @param name
	 * @return
	 */
	@SuppressWarnings({ "unused" })
	public static InputStream base64ToFile(String base64)
			throws IOException {
		String newbase64 = base64.substring(base64.indexOf(",") + 1,
				base64.length());// 去掉base前缀头信息
		ByteArrayInputStream stream = null;
		try {
			byte[] bytes = new BASE64Decoder().decodeBuffer(newbase64); // 将字符串转换为byte数组
			byte[] buffer = new byte[1024];
			for (int i = 0; i < bytes.length; ++i) {
				if (bytes[i] < 0) {//调整异常数据
					bytes[i] += 256;
				}
			}
			stream = new ByteArrayInputStream(bytes);  
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
		return stream;
	}

	/**
	 * 删除文件.
	 * 
	 * @param fileDir
	 *            文件路径
	 */
	public boolean deletefile(String fileDir) {
		boolean flag = false;
		File file = new File(fileDir);
		// 判断目录或文件是否存在
		if (!file.exists()) { // 不存在返回 false
			return flag;
		} else {
			// 判断是否为文件
			if (file.isFile()) { // 为文件时调用删除文件方法
				file.delete();
				flag = true;
				System.out.println("删除成功");
			}
		}
		return flag;
	}

}